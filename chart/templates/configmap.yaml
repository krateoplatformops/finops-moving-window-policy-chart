apiVersion: v1
data:
  api_client.rego: "package kubernetes.api.client\n\nimport rego.v1\n\n# This information
    could be retrieved from the kubernetes API\n# too, but would essentially require
    a request per API group,\n# so for now use a lookup table for the most common
    resources.\nresource_group_mapping := {\n\t\"services\": \"api/v1\",\n\t\"pods\":
    \"api/v1\",\n\t\"configmaps\": \"api/v1\",\n\t\"secrets\": \"api/v1\",\n\t\"persistentvolumeclaims\":
    \"api/v1\",\n\t\"daemonsets\": \"apis/apps/v1\",\n\t\"deployments\": \"apis/apps/v1\",\n\t\"statefulsets\":
    \"apis/apps/v1\",\n\t\"horizontalpodautoscalers\": \"api/autoscaling/v1\",\n\t\"jobs\":
    \"apis/batch/v1\",\n\t\"cronjobs\": \"apis/batch/v1beta1\",\n\t\"ingresses\":
    \"api/extensions/v1beta1\",\n\t\"replicasets\": \"apis/apps/v1\",\n\t\"networkpolicies\":
    \"apis/networking.k8s.io/v1\",\n\t\"finopsexamplepricingvmazures\": \"apis/composition.krateo.io/v0-1-4\",\n\t\"virtualmachines\":
    \"apis/compute.azure.com/v1api20220301\"\n}\n\n# Query for given resource/name
    in provided namespace\n# Example: query_ns(\"deployments\", \"my-app\", \"default\")\nquery_name_ns(resource,
    name, namespace) := http.send({\n\t\"url\": sprintf(\"https://kubernetes.default.svc/%v/namespaces/%v/%v/%v\",
    [\n\t\t# regal ignore:external-reference\n\t\tresource_group_mapping[resource],\n\t\tnamespace,\n\t\tresource,\n\t\tname,\n\t]),\n\t\"method\":
    \"get\",\n\t\"headers\": {\"authorization\": sprintf(\"Bearer %v\", [opa.runtime().env.KUBERNETES_API_TOKEN])},\n\t\"tls_ca_cert_file\":
    \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\",\n\t\"raise_error\":
    false,\n})\n\n# Query for given resource type using label selectors\n# https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api\n#
    Example: query_label_selector_ns(\"deployments\", {\"app\": \"opa-kubernetes-api-client\"},
    \"default\")\nquery_label_selector_ns(resource, selector, namespace) := http.send({\n\t\"url\":
    sprintf(\"https://kubernetes.default.svc/%v/namespaces/%v/%v?labelSelector=%v\",
    [\n\t\t# regal ignore:external-reference\n\t\tresource_group_mapping[resource],\n\t\tnamespace,\n\t\tresource,\n\t\tlabel_map_to_query_string(selector),\n\t]),\n\t\"method\":
    \"get\",\n\t\"headers\": {\"authorization\": sprintf(\"Bearer %v\", [opa.runtime().env.KUBERNETES_API_TOKEN])},\n\t\"tls_ca_cert_file\":
    \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\",\n\t\"raise_error\":
    false,\n})\n\n# Query for all resources of type resource in all namespaces\n#
    Example: query_all(\"deployments\")\nquery_all(resource) := http.send({\n\t\"url\":
    sprintf(\"https://kubernetes.default.svc/%v/%v\", [\n\t\t# regal ignore:external-reference\n\t\tresource_group_mapping[resource],\n\t\tresource,\n\t]),\n\t\"method\":
    \"get\",\n\t\"headers\": {\"authorization\": sprintf(\"Bearer %v\", [opa.runtime().env.KUBERNETES_API_TOKEN])},\n\t\"tls_ca_cert_file\":
    \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\",\n\t\"raise_error\":
    false,\n})\n\nlabel_map_to_query_string(map) := concat(\",\", [str | val := map[key];
    str := concat(\"%3D\", [key, val])])"
  main_router.rego: |-
    package router

    import data.finops_admission

    default result := {}

    result := data.finops_admission.main if {
      print("Evaluating request for ", input.request.object.metadata.name, input.request.object.apiVersion, input.request.object.kind)
      input.request.object.apiVersion  == "composition.krateo.io/v0-1-4"
      input.request.object.kind        == "FinopsExamplePricingVmAzure"
    }
  moving_window.rego: "package finops_admission\n\nimport data.kubernetes.api.client\nimport
    rego.v1\n\noperations := {\"UPDATE\"}\n\ndefault apiVersion = \"admission.k8s.io/v1beta1\"\napiVersion
    = input.apiVersion\ndefault response_uid = \"\"\nresponse_uid := input.request.uid\n\nmain
    := msg if {\n    print(\"Evaluating moving window policy\")\n    operations[input.request.operation]\n
    \   print(\"Operation: UPDATE\")\n    patches := [{\n        \"op\": \"add\",
    \n        \"path\": \"/spec/optimization\", \n        \"value\": sprintf(\"%s\",
    optimization_data)\n    }]\n    fullPatches := ensureParentPathsExist(patches)\n\n
    \   response := {\n        \"allowed\": true,\n        \"patchType\": \"JSONPatch\",\n
    \       \"uid\": response_uid,\n        \"patch\": base64.encode(json.marshal(fullPatches))\n
    \   }\n\n    msg = {\n        \"apiVersion\": apiVersion,\n        \"kind\": \"AdmissionReview\",\n
    \       \"response\": response,\n    }\n}\n\n\noptimization_data := result if
    {\n    optimizationServiceSecretName := input.request.object.spec.policyAdditionalValues.optimizationServiceEndpointRef.name\n
    \   optimizationServiceSecretNamespace := input.request.object.spec.policyAdditionalValues.optimizationServiceEndpointRef.namespace\n
    \   print(\"Got secret data for optimization service: \", optimizationServiceSecretName,
    optimizationServiceSecretNamespace)\n    databaseHandlerSecretName := concat(\"-\",
    [input.request.object.spec.metricExporter.scraperDatabaseConfigRef.name, \"endpoint\"])\n
    \   databaseHandlerSecretNamespace := input.request.object.spec.metricExporter.scraperDatabaseConfigRef.namespace\n
    \   print(\"Got secret data for database handler: \", databaseHandlerSecretName,
    databaseHandlerSecretNamespace)\n    table_name := concat(\"_\", [input.request.object.spec.global.tableName,
    \"res\"])\n    print(\"Table name is: \", table_name)\n    objService := client.query_name_ns(\"secrets\",
    optimizationServiceSecretName, optimizationServiceSecretNamespace)\n    optimizationServiceEndpoint
    := objService.body\n    #Â print(\"Got obj:\", objService)\n    objDBHandler :=
    client.query_name_ns(\"secrets\", databaseHandlerSecretName, databaseHandlerSecretNamespace)\n
    \   databaseHandlerEndpoint := objDBHandler.body\n    # print(\"Got obj:\", objDBHandler)\n
    \   databaseHandlerUrl := base64.decode(databaseHandlerEndpoint.data[\"server-url\"])\n
    \   optimizationServiceUrl := base64.decode(optimizationServiceEndpoint.data[\"server-url\"])\n
    \   username := base64.decode(databaseHandlerEndpoint.data[\"username\"])\n    password
    := base64.decode(databaseHandlerEndpoint.data[\"password\"])\n    print(\"Secret
    values: \", databaseHandlerUrl, optimizationServiceUrl, username, password)\n
    \   vm_resource_ids := get_vm_resource_ids\n    print(\"VM resources found:\",
    vm_resource_ids)\n    result := query_external_service(optimizationServiceUrl,
    databaseHandlerUrl, username, password, table_name, vm_resource_ids)\n}\n\nget_vm_resource_ids
    := resource_ids if {\n    print(\"Getting live object...\")\n    live := client.query_name_ns(\"finopsexamplepricingvmazures\",
    input.request.object.metadata.name, input.request.object.metadata.namespace)\n
    \   live.status_code == 200\n    print(\"Got live object\")\n    managed_resources
    := live.body.status.managed\n    vm_resources := [res | res := managed_resources[_];
    res.resource == \"virtualmachines\"]\n    vm_objects := [client.query_name_ns(\"virtualmachines\",
    res.name, res.namespace) | res := vm_resources[_]]\n    resource_ids := [vm.body.status.id
    | vm := vm_objects[_]]\n}\n\nquery_external_service(optimizationServiceUrl, databaseHandlerUrl,
    username, password, table_name, resource_ids) := responses if {\n    responses
    := [query_single_resource(optimizationServiceUrl, databaseHandlerUrl, username,
    password, table_name, resource_id) | resource_id := resource_ids[_]]\n}\n\nquery_single_resource(optimizationServiceUrl,
    databaseHandlerUrl, username, password, table_name, resource_id) := response if
    {\n    url := sprintf(\"%s/optimize?resource_name=%s&table_name=%s&dbhandler_url=%s/compute\",
    [optimizationServiceUrl, resource_id, table_name, databaseHandlerUrl])\n    auth_header
    := sprintf(\"Basic %s\", [base64.encode(sprintf(\"%s:%s\", [username, password]))])\n
    \   print(\"microservice compute url: \", url)\n    http_response := http.send({\n
    \       \"method\": \"GET\",\n        \"url\": url,\n        \"headers\": {\n
    \           \"Authorization\": auth_header,\n            \"Accept\": \"application/json\"\n
    \       },\n        \"raise_error\": true\n    })\n    \n    http_response.status_code
    == 200\n    print(\"microservice response: \", http_response)\n    response :=
    http_response.body\n}\n\n###########################################################################\n#
    Ensure parent paths exist\n###########################################################################\n\nensureParentPathsExist(patches)
    = result if {\n    # Convert patches to a set\n    paths := {p.path | p := patches[_]}\n
    \   # Compute all missing subpaths.\n    missingPaths := {sprintf(\"/%s\", [concat(\"/\",
    prefixPath)]) |\n        paths[path]\n        pathArray := split(path, \"/\")\n
    \       pathArray[i] # walk over path\n        i > 0 # skip initial element\n
    \       # array of all elements in path up to i\n        prefixPath := [pathArray[j]
    | pathArray[j]; j < i; j > 0] # j > 0: skip initial element\n        walkPath
    := [toWalkElement(x) | x := prefixPath[_]]\n        not inputPathExists(walkPath)
    with input as input.request.object\n    }\n    # Sort paths, to ensure they apply
    in correct order\n    ordered_paths := sort(missingPaths)\n    # Return new patches
    prepended to original patches.\n    new_patches := [{\"op\": \"add\", \"path\":
    p, \"value\": {}} |\n        p := ordered_paths[_]\n    ]\n    result := array.concat(new_patches,
    patches)\n}\n\n###########################################################################\n#
    Check that the given @path exists as part of the input object\n###########################################################################\n\ninputPathExists(path)
    if {\n    walk(input, [path, _])\n}\n\ntoWalkElement(str) = str if {\n    not
    regex.match(\"^[0-9]+$\", str)\n}\n\ntoWalkElement(str) = x if {\n    regex.match(\"^[0-9]+$\",
    str)\n    x := to_number(str)\n}"
kind: ConfigMap
metadata:
  name: {{ include "finops-moving-window-policy.fullname" . }}
